# -*- coding: utf-8 -*-
"""Ds3-As6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KvRHwBjOhq48l0ECnJY3nSGlzXz8lzk1
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import warnings 
import statsmodels.api as sm
import math
from statsmodels.tsa.ar_model import AutoReg as AR

# Defining rmse amd mape functions
def calrmse(pred ,observed):
  error = [(p - o) for p, o in zip(pred, observed)]
  square_error = [e**2 for e in error]
  mean_square_error = sum(square_error)/len(square_error)
  root_mean_square_error = mean_square_error**0.5
  rmse_percent = ((root_mean_square_error)/(sum(observed)/len(observed)))*100
  return rmse_percent
def calmape(pred , observed):
  error = [(abs(p - o))/o for p, o in zip(pred, observed)]
  mape = (sum(error)/len(error))*100
  return mape

#Question 1  Autocorrelation line plot with lagged values:

covid_df_orig = pd.read_csv("covid_cases_csv.txt")
covid_df = covid_df_orig.copy()
covid_df["Date"] = pd.to_datetime(covid_df["Date"])  

#print(covid_df.info())
#Part-A Original line plot of covid cases
plt_1 = plt.figure(figsize=(10, 5))
plt.grid(True)
plt.plot(covid_df["Date"], covid_df["new_cases"])
plt.xlabel("Date")
plt.ylabel("No of covid cases reported")
plt.title("Covid cases on each Day")
plt.show()
#Part-B # zGenerating time sequence with one day lag and calculating auto correlation
covid_df["datelag1"] = covid_df["new_cases"].shift(1)
print("The autocorrelation between actual covid cases and covid cases with 1 day lag is "+str(covid_df["new_cases"].corr(covid_df["datelag1"])))
print("-------------------------------------------------------------------------------------------------")
#Part-C scatter plot between the given time sequence and one-day lagged generated sequence
fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
plt.grid(True)
ax.scatter(covid_df["new_cases"],covid_df["datelag1"], color='b')
ax.set_xlabel('Actual covid cases')
ax.set_ylabel('Covid cases with 1 day lag')
ax.set_title('Actual covid cases vs covid cases with one day lag')
plt.show()
#Part-D . Generate multiple time sequences with different lag values
d1 = {}
for i in range(1,7):
  lag = "datelag"+str(i)
  covid_df[lag] = covid_df["new_cases"].shift(i)
  #  Computing the Pearson correlation coefficient between each of the generated time sequences and the given time sequence.
  autocorr = covid_df["new_cases"].corr(covid_df[lag])
  print("The autocorrelation between actual covid cases and covid cases with "+str(i)+" day lag is "+str(autocorr))
  print("-------------------------------------------------------------------------------------------------")
  d1[i] = autocorr

# Line plot between obtained correlation coefficients (on the y-axis) and lagged values (on the x-axis).
plt.plot(list(d1.keys()), list(d1.values()))
plt.xlabel("Lag value used")  # add X-axis label
plt.ylabel("Correlation coefficient for lag value ")  # add Y-axis label
plt.title("Correlation plot between lag value and autocorrelation")  # add title
plt.grid(True)
plt.show()
print("-------------------------------------------------------------------------------------------------")
#Part-E Plotting  correlogram or Auto Correlation Function
sm.graphics.tsa.plot_acf(covid_df["new_cases"].squeeze(), lags= 10)
plt.show()

# Question 2
#Part-A # Spliting the given data in train and test 
series = pd.read_csv('"covid_cases_csv.txt"',
                      parse_dates=['Date'],
                      index_col=['Date'],
                      sep=',')
test_size = 0.35 # 35% for testing
X = series.values
tst_sz = math.ceil(len(X)*test_size)
train, test = X[:len(X)-tst_sz], X[len(X)-tst_sz:]
train1 = train
test1 = test
#Part-B
# Training the autoregression model
window = 5 # The lag= 5
model = AR(train, lags=window)
model_fit = model.fit()  # fit/train the model
coef = model_fit.params  # Get the coefficients of AR model
print("The coefficient of the autoregression model is "+str(coef))
print("-------------------------------------------------------------------------------------------------")
#using these coefficients walk forward over time steps in test, one step each time
history = list(train[len(train)-window:])
predictions = list() # List to hold the predictions, 1 step at a time
for t in range(len(test)):
      length = len(history)
      lag = [history[i] for i in range(length-window,length)]
      yhat = coef[0]  # Initialize to w0
      for d in range(window):
          yhat += coef[d+1] * lag[window-d-1] # Add other values
      obser = test[t]
      predictions.append(yhat) #Append predictions to compute RMSE later
      history.append(obser) # Append actual test value to history, to be used in next step.

# Scatter plot between actual and predicted values.
fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
plt.grid(True)
ax.scatter(test,predictions, color='b')
ax.set_xlabel('Actual covid cases')
ax.set_ylabel('Predicted Covid cases ')
ax.set_title('Actual covid cases vs Predicted Covid cases with 5 day lag')
plt.show()
print("-------------------------------------------------------------------------------------------------")
# Line plot showing actual and predicted test values.
plt.plot(test,predictions)
plt.xlabel("Actual covid cases")  # add X-axis label
plt.ylabel('Predicted Covid cases ')  # add Y-axis label
plt.title('Actual covid cases vs Predicted Covid cases with 5 day lag')  # add title
plt.grid(True)
plt.show()
print("-------------------------------------------------------------------------------------------------")
# Computing RMSE(%) and MAPE between actual and predicted testdata.
print("The root mean square error calculated between predicted covid cases and actual covid cases is "+str(calrmse(predictions,test)))
print("-------------------------------------------------------------------------------------------------")
print("The Mean absolute percentage  error calculated between predicted covid cases and actual covid cases is "+str(calmape(predictions,test)))

#Question 3
# Generating 5 different autoregression models with lagged values 1, 5, 10, 15 and 25 days.
lag = [1,5,10,15,20,25]
drmse = {}
dmape = {}
for l in lag:
  window = l # The lag= l
  model = AR(train, lags=window)
  model_fit = model.fit()  # fit/train the model
  coef = model_fit.params  # Get the coefficients of AR model
  #using these coefficients walk forward over time steps in test, one step each time
  history = list(train[len(train)-window:])
  predictions = list() # List to hold the predictions, 1 step at a time
  for t in range(len(test)):
        length = len(history)
        lag = [history[i] for i in range(length-window,length)]
        yhat = coef[0]  # Initialize to w0
        for d in range(window):
            yhat += coef[d+1] * lag[window-d-1] # Add other values
        obser = test[t]
        predictions.append(yhat) #Append predictions to compute RMSE later
        history.append(obser) # Append actual test value to history, to be used in next step.
        # Computing  RMSE (%) and MAPE between predicted and original test data values
  drmse[l] = calrmse(predictions,test).item()
  dmape[l] = calmape(predictions,test).item()
  print("The root mean square error calculated between predicted covid cases and actual covid cases for lag "+str(l)+" is "+str(drmse[l]))
  print("-------------------------------------------------------------------------------------------------")
  print("The Mean absolute percentage  error calculated between predicted covid cases and actual covid cases for lag "+str(l)+" is "+str(dmape[l]))
  print("-------------------------------------------------------------------------------------------------")
# Bar chart showing RMSE (%) on the y-axis and lagged values on the x-axis.
fig = plt.figure(figsize = (10, 5))
# creating the bar plot
plt.bar(list(drmse.keys()),list(drmse.values()), color ='maroon',width = 0.4,log = True)
plt.grid(True)      
plt.xlabel("Lag value used")
plt.ylabel("Root Mean square error")
plt.title("RMSE for covid cases predicted using lageed values")
plt.show()
print("-------------------------------------------------------------------------------------------------")
# bar chart showing MAPE on the y-axis and lagged values on the x-axis
fig = plt.figure(figsize = (10, 5))
# creating the bar plot
plt.bar(list(dmape.keys()),list(dmape.values()), color ='maroon',
        width = 0.4,log =True)
plt.grid(True)    
plt.xlabel("Lag value used")
plt.ylabel("Mean absolute percentage error")
plt.title("MAPE for covid cases predicted using lageed values")
plt.show()
print("-------------------------------------------------------------------------------------------------")

warnings.filterwarnings("ignore")
# MAking copy of original dataframe
data = covid_df_orig.copy()
##a
# Slicing dataframe
test_size = 0.35  
tst_sze = math.ceil(len(data)*test_size)
train,test = data[:len(data)-tst_sze],data[len(data)-tst_sze:]

p = 1

#Computing auto correlation
while p>=1 :
    # Shifting the dataframe by p 
    train[str(p)+'-days lag'] = train['new_cases'].shift(p)
    # Calculating correlation coefecient 
    corr = train['new_cases'].iloc[p:].corr(train[str(p)+'-days lag'].iloc[p:])
    # Checking if the current lag is optimal lag
    if corr <= 2/(len(train)**0.5):           
        optimal_lag = p-1
        print('The heuristic value for Optimal lag find out is  is '+str(optimal_lag))
        print("-----------------------------------------------------------------------")
        break
    else:
        p = p+1

# Making train1 and test1 lists
train = train1
test = test1
#AR model for optimal lag
window = optimal_lag # The lag= 77
train = train1
test = test1
model = AR(train, lags=window)
model_fit = model.fit()  # fit/train the model
coef = model_fit.params  # Get the coefficients of AR model
#using these coefficients walk forward over time steps in test, one step each time
history = list(train[len(train)-window:])
predictions = list() # List to hold the predictions, 1 step at a time
for t in range(len(test)):
        length = len(history)
        lag = [history[i] for i in range(length-window,length)]
        yhat = coef[0]  # Initialize to w0
        for d in range(window):
            yhat += coef[d+1] * lag[window-d-1] # Add other values
        obser = test[t]
        predictions.append(yhat) #Append predictions to compute RMSE later
        history.append(obser) # Append actual test value to history, to be used in next step.
        # Computing  RMSE (%) and MAPE between predicted and original test data values
print("The root mean square error calculated between predicted covid cases and actual covid cases for optimal lag is "+str(calrmse(predictions,test)))
print("-------------------------------------------------------------------------------------------------")
print("The Mean absolute percentage  error calculated between predicted covid cases and actual covid cases for optimal lag is "+str(calmape(predictions,test)))

From the above analysis, we can predict that the lag value for Predicting covid cases with minumum rmse and minimum mape is lag = 15
